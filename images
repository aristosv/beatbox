function start_images {

# loading variables
remoteimagesmedia="/media/images/"
localimagesmedia="/home/pi/media/images"
ftpuser="signage@bbxmd.com"
ftphost="signage-ftp.bbxmd.com"
ftppass=""
ftpsettings="set ftp:ssl-allow no ; set net:reconnect-interval-base 5 ; set net:max-retries 2"

# updating images media
lftp ftp://$ftpuser:$ftppass@$ftphost -e "$ftpsettings ; mirror -v -e $remoteimagesmedia $localimagesmedia ; quit"

# removing old service file
[ -e /etc/systemd/system/images.service ] && sudo rm /etc/systemd/system/images.service

# creating new service file
echo '[Unit]' | sudo tee -a /etc/systemd/system/images.service > /dev/null
echo 'Description=Digital Signage Images' | sudo tee -a /etc/systemd/system/images.service > /dev/null
echo 'After=network.target' | sudo tee -a /etc/systemd/system/images.service > /dev/null

echo '[Service]' | sudo tee -a /etc/systemd/system/images.service > /dev/null
echo "ExecStart=/usr/bin/fim -a -u -q -R /home/pi/media/images -c 'while(1){display;sleep \"4\";next;}'" | sudo tee -a /etc/systemd/system/images.service > /dev/null
echo 'Restart=always' | sudo tee -a /etc/systemd/system/images.service > /dev/null

echo '[Install]' | sudo tee -a /etc/systemd/system/images.service > /dev/null
echo 'WantedBy=multi-user.target' | sudo tee -a /etc/systemd/system/images.service > /dev/null

# reloading systemctl
sudo systemctl daemon-reload

# clearing framebuffer
dd if=/dev/zero of=/dev/fb0 status=none > /dev/null 2>&1 &

# starting images service
sudo systemctl start images.service

# enabling images service
sudo systemctl enable images.service > /dev/null 2>&1
}

function stop_images {

# stopping images service
sudo systemctl stop images.service

# clearing framebuffer
dd if=/dev/zero of=/dev/fb0 status=none > /dev/null 2>&1 &

# showing logo
fim -q /home/pi/media/logo/bbx.png > /dev/null 2>&1 &

# disabling images service
sudo systemctl disable images.service > /dev/null 2>&1

# deleting images service
[ -e /etc/systemd/system/images.service ] && sudo rm /etc/systemd/system/images.service    
}

if [ $(systemctl show -p SubState images) = SubState=running ]
then
echo images is running
echo restarting images
 stop_images
 start_images
else
echo images is not running
echo starting images
 start_images
fi
