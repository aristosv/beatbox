function start_video {

# loading variables
remotevideomedia="/media/video/"
localvideomedia="/home/pi/media/video"
ftpuser="signage@bbxmd.com"
ftphost="signage-ftp.bbxmd.com"
ftppass=""
ftpsettings="set ftp:ssl-allow no ; set net:reconnect-interval-base 5 ; set net:max-retries 2"

# updating video media
lftp ftp://$ftpuser:$ftppass@$ftphost -e "$ftpsettings ; mirror -v -e $remotevideomedia $localvideomedia ; quit"

# removing old service file
[ -e /etc/systemd/system/video.service ] && sudo rm /etc/systemd/system/video.service

# creating new service file
echo '[Unit]' | sudo tee -a /etc/systemd/system/video.service > /dev/null
echo 'Description=Digital Signage Video' | sudo tee -a /etc/systemd/system/video.service > /dev/null
echo 'After=network.target' | sudo tee -a /etc/systemd/system/video.service > /dev/null

echo '[Service]' | sudo tee -a /etc/systemd/system/video.service > /dev/null
echo 'ExecStart=/bin/bash -c "while true ; do for video in $(ls /home/pi/media/video/* | shuf); do omxplayer --no-keys --no-osd $video; done; done"' | sudo tee -a /etc/systemd/system/video.service > /dev/null
echo 'Restart=always' | sudo tee -a /etc/systemd/system/video.service > /dev/null

echo '[Install]' | sudo tee -a /etc/systemd/system/video.service > /dev/null
echo 'WantedBy=multi-user.target' | sudo tee -a /etc/systemd/system/video.service > /dev/null

# reloading systemctl
sudo systemctl daemon-reload

# clearing framebuffer
dd if=/dev/zero of=/dev/fb0 status=none > /dev/null 2>&1 &

# starting video service
sudo systemctl start video.service

# enabling video service
sudo systemctl enable video.service > /dev/null 2>&1
}

function stop_video {

# stopping video service
sudo systemctl stop video.service

# clearing framebuffer
dd if=/dev/zero of=/dev/fb0 status=none > /dev/null 2>&1 &

# showing logo
fim -q /home/pi/media/logo/bbx.png > /dev/null 2>&1 &

# disabling video service
sudo systemctl disable video.service > /dev/null 2>&1

# deleting video service
[ -e /etc/systemd/system/video.service ] && sudo rm /etc/systemd/system/video.service    
}

if [ $(systemctl show -p SubState video) = SubState=running ]
then
echo video is running
echo restarting video
 stop_video
 start_video
else
echo video is not running
echo starting video
 start_video
fi
